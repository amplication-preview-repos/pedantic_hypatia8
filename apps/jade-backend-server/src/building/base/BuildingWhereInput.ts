/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { InputType, Field } from "@nestjs/graphql";
import { ApiProperty } from "@nestjs/swagger";
import { StringFilter } from "../../util/StringFilter";
import { Type } from "class-transformer";
import { IsOptional, IsEnum, ValidateNested } from "class-validator";
import { StringNullableFilter } from "../../util/StringNullableFilter";
import { EnumBuildingCountryCode } from "./EnumBuildingCountryCode";
import { UnitListRelationFilter } from "../../unit/base/UnitListRelationFilter";

@InputType()
class BuildingWhereInput {
  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  id?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  name?: StringNullableFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  streetAddress1?: StringFilter;

  @ApiProperty({
    required: false,
    type: StringFilter,
  })
  @Type(() => StringFilter)
  @IsOptional()
  @Field(() => StringFilter, {
    nullable: true,
  })
  postalCode?: StringFilter;

  @ApiProperty({
    required: false,
    enum: EnumBuildingCountryCode,
  })
  @IsEnum(EnumBuildingCountryCode)
  @IsOptional()
  @Field(() => EnumBuildingCountryCode, {
    nullable: true,
  })
  countryCode?: "usa";

  @ApiProperty({
    required: false,
    type: () => UnitListRelationFilter,
  })
  @ValidateNested()
  @Type(() => UnitListRelationFilter)
  @IsOptional()
  @Field(() => UnitListRelationFilter, {
    nullable: true,
  })
  units?: UnitListRelationFilter;

  @ApiProperty({
    required: false,
    type: StringNullableFilter,
  })
  @Type(() => StringNullableFilter)
  @IsOptional()
  @Field(() => StringNullableFilter, {
    nullable: true,
  })
  phone?: StringNullableFilter;
}

export { BuildingWhereInput as BuildingWhereInput };
