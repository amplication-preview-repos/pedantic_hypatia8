/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Resident } from "./Resident";
import { ResidentCountArgs } from "./ResidentCountArgs";
import { ResidentFindManyArgs } from "./ResidentFindManyArgs";
import { ResidentFindUniqueArgs } from "./ResidentFindUniqueArgs";
import { CreateResidentArgs } from "./CreateResidentArgs";
import { UpdateResidentArgs } from "./UpdateResidentArgs";
import { DeleteResidentArgs } from "./DeleteResidentArgs";
import { PaymentFindManyArgs } from "../../payment/base/PaymentFindManyArgs";
import { Payment } from "../../payment/base/Payment";
import { Unit } from "../../unit/base/Unit";
import { ResidentService } from "../resident.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Resident)
export class ResidentResolverBase {
  constructor(
    protected readonly service: ResidentService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Resident",
    action: "read",
    possession: "any",
  })
  async _residentsMeta(
    @graphql.Args() args: ResidentCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Resident])
  @nestAccessControl.UseRoles({
    resource: "Resident",
    action: "read",
    possession: "any",
  })
  async residents(
    @graphql.Args() args: ResidentFindManyArgs
  ): Promise<Resident[]> {
    return this.service.residents(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Resident, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Resident",
    action: "read",
    possession: "own",
  })
  async resident(
    @graphql.Args() args: ResidentFindUniqueArgs
  ): Promise<Resident | null> {
    const result = await this.service.resident(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Resident)
  @nestAccessControl.UseRoles({
    resource: "Resident",
    action: "create",
    possession: "any",
  })
  async createResident(
    @graphql.Args() args: CreateResidentArgs
  ): Promise<Resident> {
    return await this.service.createResident({
      ...args,
      data: {
        ...args.data,

        unit: args.data.unit
          ? {
              connect: args.data.unit,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Resident)
  @nestAccessControl.UseRoles({
    resource: "Resident",
    action: "update",
    possession: "any",
  })
  async updateResident(
    @graphql.Args() args: UpdateResidentArgs
  ): Promise<Resident | null> {
    try {
      return await this.service.updateResident({
        ...args,
        data: {
          ...args.data,

          unit: args.data.unit
            ? {
                connect: args.data.unit,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Resident)
  @nestAccessControl.UseRoles({
    resource: "Resident",
    action: "delete",
    possession: "any",
  })
  async deleteResident(
    @graphql.Args() args: DeleteResidentArgs
  ): Promise<Resident | null> {
    try {
      return await this.service.deleteResident(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Payment], { name: "payments" })
  @nestAccessControl.UseRoles({
    resource: "Payment",
    action: "read",
    possession: "any",
  })
  async findPayments(
    @graphql.Parent() parent: Resident,
    @graphql.Args() args: PaymentFindManyArgs
  ): Promise<Payment[]> {
    const results = await this.service.findPayments(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Unit, {
    nullable: true,
    name: "unit",
  })
  @nestAccessControl.UseRoles({
    resource: "Unit",
    action: "read",
    possession: "any",
  })
  async getUnit(@graphql.Parent() parent: Resident): Promise<Unit | null> {
    const result = await this.service.getUnit(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
