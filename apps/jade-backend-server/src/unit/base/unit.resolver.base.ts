/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Unit } from "./Unit";
import { UnitCountArgs } from "./UnitCountArgs";
import { UnitFindManyArgs } from "./UnitFindManyArgs";
import { UnitFindUniqueArgs } from "./UnitFindUniqueArgs";
import { CreateUnitArgs } from "./CreateUnitArgs";
import { UpdateUnitArgs } from "./UpdateUnitArgs";
import { DeleteUnitArgs } from "./DeleteUnitArgs";
import { ResidentFindManyArgs } from "../../resident/base/ResidentFindManyArgs";
import { Resident } from "../../resident/base/Resident";
import { Building } from "../../building/base/Building";
import { UnitService } from "../unit.service";
@graphql.Resolver(() => Unit)
export class UnitResolverBase {
  constructor(protected readonly service: UnitService) {}

  async _unitsMeta(
    @graphql.Args() args: UnitCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Unit])
  async units(@graphql.Args() args: UnitFindManyArgs): Promise<Unit[]> {
    return this.service.units(args);
  }

  @graphql.Query(() => Unit, { nullable: true })
  async unit(@graphql.Args() args: UnitFindUniqueArgs): Promise<Unit | null> {
    const result = await this.service.unit(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Unit)
  async createUnit(@graphql.Args() args: CreateUnitArgs): Promise<Unit> {
    return await this.service.createUnit({
      ...args,
      data: {
        ...args.data,

        building: args.data.building
          ? {
              connect: args.data.building,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Unit)
  async updateUnit(@graphql.Args() args: UpdateUnitArgs): Promise<Unit | null> {
    try {
      return await this.service.updateUnit({
        ...args,
        data: {
          ...args.data,

          building: args.data.building
            ? {
                connect: args.data.building,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Unit)
  async deleteUnit(@graphql.Args() args: DeleteUnitArgs): Promise<Unit | null> {
    try {
      return await this.service.deleteUnit(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Resident], { name: "residents" })
  async findResidents(
    @graphql.Parent() parent: Unit,
    @graphql.Args() args: ResidentFindManyArgs
  ): Promise<Resident[]> {
    const results = await this.service.findResidents(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }

  @graphql.ResolveField(() => Building, {
    nullable: true,
    name: "building",
  })
  async getBuilding(@graphql.Parent() parent: Unit): Promise<Building | null> {
    const result = await this.service.getBuilding(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
